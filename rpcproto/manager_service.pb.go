// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcproto/manager_service.proto

// Copyright (c) 2018 Donovan Solms / MiningHQ. Licensed under the MIT license.
// See LICENSE in the root of this repository for details.

package rpcproto

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("rpcproto/manager_service.proto", fileDescriptor_ed5554ad61747529) }

var fileDescriptor_ed5554ad61747529 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x2a, 0x48, 0x2e,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0x2d, 0x8a, 0x2f, 0x4e, 0x2d,
	0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x8b, 0x0a, 0x71, 0xc0, 0xe4, 0xa5, 0x84, 0xe1, 0x2a, 0x73,
	0xf2, 0xd3, 0x8b, 0x21, 0xd2, 0x52, 0x22, 0x70, 0xc1, 0xe2, 0x92, 0xc4, 0x92, 0x54, 0xac, 0xa2,
	0x30, 0xb5, 0xe2, 0x70, 0xd1, 0xa2, 0xcc, 0xf4, 0xf8, 0xcc, 0xbc, 0xb4, 0x7c, 0x88, 0x84, 0xd1,
	0x41, 0x26, 0x2e, 0x3e, 0x5f, 0x88, 0xed, 0xc1, 0x10, 0xcb, 0x85, 0xec, 0xb8, 0xd8, 0xdd, 0x53,
	0x4b, 0x3c, 0xf3, 0xd2, 0xf2, 0x85, 0x24, 0xf4, 0x60, 0xfa, 0xf4, 0x82, 0x32, 0xd3, 0x41, 0x42,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x92, 0x58, 0x64, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x85, 0xac, 0xb9, 0x38, 0xdc, 0x53, 0x4b, 0x82, 0x41, 0x6e, 0x12, 0x12, 0x43, 0x28, 0x03,
	0x0b, 0xc0, 0xb4, 0x8b, 0x63, 0x88, 0x23, 0x34, 0x07, 0x53, 0xa2, 0x19, 0x6a, 0x73, 0x31, 0xba,
	0xe6, 0x62, 0x1c, 0x9a, 0x8b, 0xe1, 0x9a, 0x2d, 0xc0, 0xde, 0xf6, 0xc9, 0x4f, 0x2f, 0x16, 0x12,
	0x45, 0xa8, 0x01, 0xf1, 0x61, 0x5a, 0xc5, 0xd0, 0x85, 0x21, 0x3a, 0x93, 0xd8, 0xc0, 0x62, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x5e, 0x89, 0x4b, 0xd0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerServiceClient interface {
	// GetInfo returns the information about the rig
	GetInfo(ctx context.Context, in *RigInfoRequest, opts ...grpc.CallOption) (*RigInfoResponse, error)
	// GetState requests the current rig state
	GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	// SetState requests the rig to enter the specified state
	SetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	// GetStats requests the current stats from the rig
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// GetLogs requests a rig's logs
	GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error)
}

type managerServiceClient struct {
	cc *grpc.ClientConn
}

func NewManagerServiceClient(cc *grpc.ClientConn) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) GetInfo(ctx context.Context, in *RigInfoRequest, opts ...grpc.CallOption) (*RigInfoResponse, error) {
	out := new(RigInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcproto.ManagerService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/rpcproto.ManagerService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/rpcproto.ManagerService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/rpcproto.ManagerService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, "/rpcproto.ManagerService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
type ManagerServiceServer interface {
	// GetInfo returns the information about the rig
	GetInfo(context.Context, *RigInfoRequest) (*RigInfoResponse, error)
	// GetState requests the current rig state
	GetState(context.Context, *StateRequest) (*StateResponse, error)
	// SetState requests the rig to enter the specified state
	SetState(context.Context, *StateRequest) (*StateResponse, error)
	// GetStats requests the current stats from the rig
	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)
	// GetLogs requests a rig's logs
	GetLogs(context.Context, *LogsRequest) (*LogsResponse, error)
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RigInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcproto.ManagerService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetInfo(ctx, req.(*RigInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcproto.ManagerService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcproto.ManagerService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SetState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcproto.ManagerService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcproto.ManagerService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetLogs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcproto.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _ManagerService_GetInfo_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _ManagerService_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _ManagerService_SetState_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ManagerService_GetStats_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _ManagerService_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcproto/manager_service.proto",
}
