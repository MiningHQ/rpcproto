// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcproto/rig_assignment.proto

// Copyright (c) 2018 Donovan Solms / MiningHQ. Licensed under the MIT license.
// See LICENSE in the root of this repository for details.

package rpcproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RigAssignmentRequest contains the information for a miner to start mining
type RigAssignmentRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RigAssignmentRequest) Reset()         { *m = RigAssignmentRequest{} }
func (m *RigAssignmentRequest) String() string { return proto.CompactTextString(m) }
func (*RigAssignmentRequest) ProtoMessage()    {}
func (*RigAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32283fa8ae293, []int{0}
}

func (m *RigAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RigAssignmentRequest.Unmarshal(m, b)
}
func (m *RigAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RigAssignmentRequest.Marshal(b, m, deterministic)
}
func (m *RigAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RigAssignmentRequest.Merge(m, src)
}
func (m *RigAssignmentRequest) XXX_Size() int {
	return xxx_messageInfo_RigAssignmentRequest.Size(m)
}
func (m *RigAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RigAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RigAssignmentRequest proto.InternalMessageInfo

// RigAssignmentResponse is returned for a RigAssignmentRequest
type RigAssignmentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RigAssignmentResponse) Reset()         { *m = RigAssignmentResponse{} }
func (m *RigAssignmentResponse) String() string { return proto.CompactTextString(m) }
func (*RigAssignmentResponse) ProtoMessage()    {}
func (*RigAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32283fa8ae293, []int{1}
}

func (m *RigAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RigAssignmentResponse.Unmarshal(m, b)
}
func (m *RigAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RigAssignmentResponse.Marshal(b, m, deterministic)
}
func (m *RigAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RigAssignmentResponse.Merge(m, src)
}
func (m *RigAssignmentResponse) XXX_Size() int {
	return xxx_messageInfo_RigAssignmentResponse.Size(m)
}
func (m *RigAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RigAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RigAssignmentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RigAssignmentRequest)(nil), "rpcproto.RigAssignmentRequest")
	proto.RegisterType((*RigAssignmentResponse)(nil), "rpcproto.RigAssignmentResponse")
}

func init() { proto.RegisterFile("rpcproto/rig_assignment.proto", fileDescriptor_98b32283fa8ae293) }

var fileDescriptor_98b32283fa8ae293 = []byte{
	// 90 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x2a, 0x48, 0x2e,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0xca, 0x4c, 0x8f, 0x4f, 0x2c, 0x2e, 0xce, 0x4c, 0xcf, 0xcb,
	0x4d, 0xcd, 0x2b, 0xd1, 0x03, 0x0b, 0x0a, 0x71, 0xc0, 0xa4, 0x95, 0xc4, 0xb8, 0x44, 0x82, 0x32,
	0xd3, 0x1d, 0xe1, 0x0a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0xc4, 0xb9, 0x44, 0xd1,
	0xc4, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x93, 0xd8, 0xc0, 0xfa, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x7d, 0xa2, 0xf5, 0x62, 0x00, 0x00, 0x00,
}
